%% File : Setup.tlc
%% Created : Thu Oct 20 19:46:07 2022
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "Setup.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  Setup "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "Setup_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void Setup_Start_wrapper_accel(void **pW);
    SFB_EXTERN_C void Setup_Outputs_wrapper_accel(const uint8_T *Address,
			const uint8_T *ConnectionType,
			const uint8_T *COM_Port,
			const uint32_T *Baud_Rate,
			const real_T *Timeout,
			const int32_T *Trials_on_Failure,
			boolean_T *Result,
			void **pW);
    SFB_EXTERN_C void Setup_Terminate_wrapper_accel(void **pW);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "Setup_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void Setup_Start_wrapper(void **pW);
    extern void Setup_Outputs_wrapper(const uint8_T *Address,
			const uint8_T *ConnectionType,
			const uint8_T *COM_Port,
			const uint32_T *Baud_Rate,
			const real_T *Timeout,
			const int32_T *Trials_on_Failure,
			boolean_T *Result,
			void **pW);
    extern void Setup_Terminate_wrapper(void **pW);
    void Setup_Start_wrapper_accel(void **pW){
    Setup_Start_wrapper(pW);
    }
    void Setup_Outputs_wrapper_accel(const uint8_T *Address,
			const uint8_T *ConnectionType,
			const uint8_T *COM_Port,
			const uint32_T *Baud_Rate,
			const real_T *Timeout,
			const int32_T *Trials_on_Failure,
			boolean_T *Result,
			void **pW){
    Setup_Outputs_wrapper(Address,
			ConnectionType,
			COM_Port,
			Baud_Rate,
			Timeout,
			Trials_on_Failure,
			Result,
			pW);
    }
    void Setup_Terminate_wrapper_accel(void **pW){
    Setup_Terminate_wrapper(pW);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void Setup_Start_wrapper(void **pW);

    SFB_EXTERN_C void Setup_Outputs_wrapper(const uint8_T *Address,
			const uint8_T *ConnectionType,
			const uint8_T *COM_Port,
			const uint32_T *Baud_Rate,
			const real_T *Timeout,
			const int32_T *Trials_on_Failure,
			boolean_T *Result,
			void **pW);

    SFB_EXTERN_C void Setup_Terminate_wrapper(void **pW);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    Setup_Start_wrapper_accel(%<ppw>);
  %else
    Setup_Start_wrapper(%<ppw>);
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    Setup_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<py0>, %<ppw>);
  %else
    Setup_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<py0>, %<ppw>);
  %endif

  %%
%endfunction

%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    Setup_Terminate_wrapper_accel(%<ppw>);
  %else
    Setup_Terminate_wrapper(%<ppw>);
  %endif

%endfunction

%% [EOF] Setup.tlc

